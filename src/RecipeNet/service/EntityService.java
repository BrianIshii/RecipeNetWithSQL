package RecipeNet.service;

import RecipeNet.entity.Entity;
import RecipeNet.entity.Status;
import RecipeNet.exception.DuplicateEntryException;
import RecipeNet.exception.ExecutorException;
import RecipeNet.exception.NoRowsAffectedException;
import RecipeNet.schema.Field;
import RecipeNet.schema.RequestSchema;
import RecipeNet.schema.ResponseSchema;

import java.util.List;

public abstract class EntityService {
  protected static ExecutorService executorService = ExecutorService.getInstance();

  /**
   * Based on the state of the entity being saved, may create or update the entity in the *
   * database.
   *
   * @param entity
   * @param <E>
   * @return
   * @throws NoRowsAffectedException
   * @throws DuplicateEntryException
   * @throws ExecutorException
   */
  public <E extends Entity> E save(E entity) throws ExecutorException {
    switch (entity.getStatus()) {
      case NEW:
        return create(entity);
      case DIRTY:
        return commit(entity);
      case SYNCED:
      default:
        return entity;
    }
  }

  /**
   * Invokes the delete method of the ExecutorService, using the primary key of the provided Entity
   * to target the correct tuple.
   *
   * @param entity
   * @param <E>
   * @throws NoRowsAffectedException
   * @throws ExecutorException
   */
  public <E extends Entity> void delete(E entity) throws ExecutorException {
    if(entity.getStatus() == Status.NEW) return;
    List<Field> primaryFields = entity.getPrimaryFields();
    executorService.executeDelete(entity.getTableName(), primaryFields);
  }

  /**
   * Invokes the insert method of the ExecutorService to create a tuple in the database with the new
   * fields. The returned entity will have it's primary key populated with the id generated by the
   * database.
   *
   * @param entity
   * @param <E>
   * @return
   * @throws NoRowsAffectedException
   * @throws DuplicateEntryException
   * @throws ExecutorException
   */
  protected <E extends Entity> E create(E entity) throws ExecutorException {
    RequestSchema primaryFields = new RequestSchema(entity.getPrimaryFields());
    RequestSchema nonPrimaryFields = new RequestSchema(entity.getNonPrimaryFields());
    ResponseSchema response =
            executorService.executeInsert(entity.getTableName(), primaryFields, nonPrimaryFields);
    response.applyValuesTo(entity, true);
    entity.setSynced();
    return entity;
  }

  /**
   * Invokes the update method of the ExecutorService to update a row in the database. It extracts
   * and used the primary key to target the correct tuple.
   *
   * @param entity
   * @param <E>
   * @return
   * @throws NoRowsAffectedException
   * @throws ExecutorException
   */
  protected <E extends Entity> E commit(E entity) throws ExecutorException {
    RequestSchema primaryFields = new RequestSchema(entity.getPrimaryFields());
    RequestSchema nonPrimaryFields = new RequestSchema(entity.getNonPrimaryFields());

    executorService.executeUpdate(entity.getTableName(), nonPrimaryFields, primaryFields);
    entity.setSynced();
    return entity;
  }
}
